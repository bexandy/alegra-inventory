<?php

namespace Alegra\Controller;

use Alegra\Hydrator\ProductHydrator;
use Alegra\Model\Product;
use Alegra\Model\ProductCommandInterface;
use Alegra\Model\ProductRepositoryInterface;
use Zend\Mvc\Controller\AbstractRestfulController;
use Zend\View\Model\JsonModel;

class ProductController extends AbstractRestfulController
{
	/**
     * @var ProductRepositoryInterface
     */
    private $productRepository;
    private $productCommand;

    public function __construct(
            ProductRepositoryInterface $productRepository, 
            ProductCommandInterface $productCommand
        )
    {
        $this->productRepository = $productRepository;
        $this->productCommand = $productCommand;
    }

    private function notFound()
    {
        $this->getResponse()->setStatusCode(404);
        return new JsonModel([
            'success' => false,
            'message' => 'Not found'
        ]);
    }


    public function getList()
    {
        $products = $this->productRepository->findAllProducts();
        $test = $products->toArray();
        $decode = $this->array_filter_recursive_from_alegra($test);

        $json = new JsonModel([
            'success' => true,
            'data' => $decode
        ]);

        return $json;
    }


    public function get($id)
    {

        $product = $this->productRepository->findProduct($id);

        if ($product instanceof Product) {
            $arreglo = $product->toArray();
            return new JsonModel([
                'success' => true,
                'data' => $product->toArray()
            ]);
        }
        else {
            return $this->notFound(); // Return a 404 if the product is not found
        }
    }

    // POST /product
    // Creates a new product
    // The $data parameter is automatically mapped from the request body
    public function create($data)
    {

        unset($data['id']);

        //$decode = json_decode($data, true);
        $decode = $this->array_filter_recursive_from_sencha($data);

        if (! $decode)
            return $this->notFound();

        $hydrator = new  ProductHydrator();
        $product = $hydrator->hydrate( $decode,new Product());

        $enviar = $this->productCommand->insertPost($product);

        if ($enviar instanceof Product) {
            $arreglo = $enviar->toArray();
            return new JsonModel([
                'success' => true,
                'data' => $arreglo
            ]);
        }
        else {
            return $this->notFound(); // Return a 404 if the product is not found
        }

        $this->getResponse()->setStatusCode(200);

        return new JsonModel([
            'success' => true,
            'message' => 'Success',
            'data' => $enviar->toArray()
         ]);
    }

    public function delete($id)
    {
        $hydrator = new  ProductHydrator();
        $product = $hydrator->hydrate( ['id' => $id], new Product());

        $delete = $this->productCommand->deleteProduct($product);

        if ($delete['code'] == '200') {
            $this->getResponse()->setStatusCode(200);
            return new JsonModel([
                'success' => true,
                'message' => $delete
            ]);
        }
        else {
            $this->getResponse()->setStatusCode(404);
            return $this->notFound(); // Return a 404 if the product is not found
        }

        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    public function update($id, $data)
    {
        $resource = $id;

        //$filter = $this->array_filter_recursive_from_sencha($data);
        //$convert = $this->convert_to_null($filter);
        //$decode = $data;
        $data = $this->convert_to_null($data);

        if (! $data)
            return $this->notFound();

        $hydrator = new  ProductHydrator();
        $product = $hydrator->hydrate( $data, new Product());

        $product->setId($resource);

        $enviar = $this->productCommand->updateProduct($product);

        if ($enviar instanceof Product) {
            $arreglo = $enviar->toArray();
            $this->getResponse()->setStatusCode(200);
            return new JsonModel([
                'success' => true,
                'data' => $arreglo
            ]);
        }
        else {
            $this->getResponse()->setStatusCode(404);
            return new JsonModel([
                'success' => false,
                'message' => $enviar
            ]);
        }

        $this->getResponse()->setStatusCode(200);

        return new JsonModel([
            'success' => true,
            'message' => 'Success',
            'data' => $enviar->toArray()
         ]);

        return parent::update($id, $data); // TODO: Change the autogenerated stub
    }


    public function ConverCurrency()
    {
        // set API Endpoint, access key, required parameters
            $endpoint = 'live';
            $access_key = '697bee86c1bd1128bf49fe7270dfbb97';

            $currencies = 'COP';

            // initialize CURL:
            $ch = curl_init('http://apilayer.net/api/'.$endpoint.'?access_key='.$access_key.'&currencies='.$currencies.'');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

            // get the (still encoded) JSON data:
            $json = curl_exec($ch);
            curl_close($ch);

            // Decode JSON response:
            $conversionResult = json_decode($json, true);

            // access the conversion result
            return $conversionResult['result'];
    }

    function array_filter_recursive_from_sencha($input)
    {
        foreach ($input as &$value)
        {
            if (is_array($value))
            {
                //$value = empty($value) ? null : $value;
                /*
                foreach ($value as $k => $v) {
                    $v= trim($v);
                    if (empty($v))
                        $value = null;
                }*/
                $value = $this->array_filter_recursive_from_sencha($value);
            }
        }   

        $filter = array_filter($input, function($v){ return !is_null($v);});
        return $filter;
    }

    function array_filter_recursive_from_alegra($input)
    {
        foreach ($input as &$value)
        {
            if (is_array($value))
            {
                $value = $this->array_filter_recursive_from_alegra($value);
            }
        }   

        $filter = array_filter($input, function($v){ return is_null($v) || $v != '';});
        return $filter;
    }

    function convert_to_null($input)
    {
        foreach ($input as &$value)
            $value = ($value == '') ? null : $value;
        return $input;
    }

}